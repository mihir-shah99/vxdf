import React from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { ArrowLeft, Play, CheckCircle, AlertTriangle, Shield, Clock } from 'lucide-react';
import { useVulnerability, useStartValidation } from '../hooks/useVulnerabilities';
import toast from 'react-hot-toast';

export default function VulnerabilityDetail() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { data: vulnerability, isLoading, error } = useVulnerability(id!);
  const startValidationMutation = useStartValidation();

  const handleStartValidation = async () => {
    try {
      await startValidationMutation.mutateAsync(id!);
      toast.success('Validation started successfully');
    } catch (error) {
      toast.error('Failed to start validation');
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-vxdf-primary"></div>
      </div>
    );
  }

  if (error || !vulnerability) {
    return (
      <div className="text-center py-12">
        <AlertTriangle className="h-16 w-16 text-red-400 mx-auto mb-4" />
        <h3 className="text-xl font-semibold text-white mb-2">Vulnerability Not Found</h3>
        <p className="text-vxdf-gray-400">The requested vulnerability could not be loaded.</p>
        <button
          onClick={() => navigate('/vulnerabilities')}
          className="btn-primary mt-4"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Vulnerabilities
        </button>
      </div>
    );
  }

  const getStatusInfo = () => {
    if (vulnerability.exploitable === true) {
      return { icon: AlertTriangle, text: 'Exploitable', className: 'status-exploitable' };
    }
    if (vulnerability.exploitable === false) {
      return { icon: Shield, text: 'Not Exploitable', className: 'status-safe' };
    }
    if (vulnerability.validated) {
      return { icon: CheckCircle, text: 'Validated', className: 'status-validated' };
    }
    return { icon: Clock, text: 'Pending', className: 'status-pending' };
  };

  const status = getStatusInfo();
  const StatusIcon = status.icon;

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <button
          onClick={() => navigate('/vulnerabilities')}
          className="btn-secondary"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Vulnerabilities
        </button>
        
        {!vulnerability.validated && (
          <button
            onClick={handleStartValidation}
            disabled={startValidationMutation.isPending}
            className="btn-primary"
          >
            <Play className="h-4 w-4 mr-2" />
            {startValidationMutation.isPending ? 'Starting...' : 'Start Validation'}
          </button>
        )}
      </div>

      {/* Main Details */}
      <div className="card p-6">
        <div className="flex items-start justify-between mb-6">
          <div>
            <h1 className="text-2xl font-bold text-white mb-2">
              {vulnerability.title || 'Untitled Vulnerability'}
            </h1>
            <div className="flex items-center space-x-4">
              <div className={`status-badge ${status.className} flex items-center space-x-1`}>
                <StatusIcon className="h-4 w-4" />
                <span>{status.text}</span>
              </div>
              <div className="px-3 py-1 text-sm font-medium rounded border text-red-400 bg-red-500/10 border-red-500/20">
                {vulnerability.severity || 'UNKNOWN'}
              </div>
            </div>
          </div>
        </div>

        <div className="prose prose-invert max-w-none">
          <p className="text-vxdf-gray-300 leading-relaxed">
            {vulnerability.description || 'No description available.'}
          </p>
        </div>

        {/* Source/Sink Information */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-8">
          <div>
            <h3 className="text-lg font-semibold text-white mb-3">Source Location</h3>
            <div className="bg-vxdf-gray-800 p-4 rounded-lg">
              <p className="text-sm text-vxdf-gray-300 font-mono">
                üìÅ {vulnerability.source?.file || 'Unknown file'}
              </p>
              {vulnerability.source?.line && (
                <p className="text-sm text-vxdf-gray-400">
                  Line {vulnerability.source.line}
                </p>
              )}
            </div>
          </div>

          <div>
            <h3 className="text-lg font-semibold text-white mb-3">Sink Location</h3>
            <div className="bg-vxdf-gray-800 p-4 rounded-lg">
              <p className="text-sm text-vxdf-gray-300 font-mono">
                üìÅ {vulnerability.sink?.file || 'Unknown file'}
              </p>
              {vulnerability.sink?.line && (
                <p className="text-sm text-vxdf-gray-400">
                  Line {vulnerability.sink.line}
                </p>
              )}
            </div>
          </div>
        </div>

        {/* Evidence */}
        {vulnerability.evidence && vulnerability.evidence.length > 0 && (
          <div className="mt-8">
            <h3 className="text-lg font-semibold text-white mb-4">Evidence</h3>
            <div className="space-y-4">
              {vulnerability.evidence.map((evidence, index) => (
                <div key={index} className="bg-vxdf-gray-800 p-4 rounded-lg">
                  <div className="flex items-center justify-between mb-2">
                    <span className="font-medium text-white">{evidence.type}</span>
                    <span className="text-xs text-vxdf-gray-400">
                      {new Date(evidence.timestamp).toLocaleString()}
                    </span>
                  </div>
                  <p className="text-sm text-vxdf-gray-300 mb-2">{evidence.description}</p>
                  {evidence.content && (
                    <pre className="text-xs text-vxdf-gray-300 bg-vxdf-gray-900 p-2 rounded overflow-x-auto">
                      <code>{evidence.content}</code>
                    </pre>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
} 